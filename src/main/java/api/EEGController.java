package api;

import model.ModelClassifier;
import model.ModelGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import weka.core.*;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;
import java.util.HashMap;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/eeg") // This means URL's start with /eeg (after api.Application path)
public class EEGController {

    private final Logger log = LoggerFactory.getLogger(EEGController.class);

    ModelClassifier classifier = new ModelClassifier();

    @Autowired // This means to get the bean called eegDataRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EEGDataRepository eegDataRepository;

    @GetMapping("/get")
    public @ResponseBody
    Iterable<EEGData> get() {
        return eegDataRepository.findAll();
    }

    @PostMapping("/classify")
    public @ResponseBody
    HashMap<String, String> classify(@RequestBody EEGData eegData) {

        Instances classInstances = classifier.createInstance(eegData.getTheta(), eegData.getLowAlpha(), eegData.getHighAlpha(), eegData.getLowBeta(), eegData.getHighBeta(), eegData.getLowGamma(), eegData.getMidGamma(), eegData.getAttention(), eegData.getMeditation(), eegData.getBlink());

        HashMap<String, String> response = new HashMap<>();
        for (ModelGenerator.METHODS method : ModelGenerator.METHODS.values()) {

            Path modelPath = Paths.get(System.getenv("MODELS_PATH"), eegData.getUserId().toString(), method.name() + ".bin");
            if (!modelPath.toFile().exists()) {
                response.put(method.name(), "Not classified!");
                continue;
            }

            String className = classifier.classify(classInstances, modelPath.toString());

            log.info("The method {} classified the instance as {}", method.name(), className);
            response.put(method.name(), className);
        }

        return response;
    }

}